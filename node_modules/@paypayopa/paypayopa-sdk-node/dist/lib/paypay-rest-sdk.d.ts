import { Conf } from "./conf";
import { HttpsClient, HttpsClientError, HttpsClientMessage, HttpsClientSuccess } from "./httpsClient";
declare class PayPayRestSDK {
    private readonly auth;
    private config;
    private httpsClient;
    constructor();
    setHttpsClient(httpsClient: HttpsClient): void;
    configure: (clientConfig: {
        clientId: string;
        clientSecret: string;
        merchantId?: string;
        productionMode?: boolean;
        perfMode?: boolean;
        env?: 'PROD' | 'STAGING' | 'PERF_MODE';
        conf?: Conf;
    }) => void;
    private createAuthHeader;
    private fillPathTemplate;
    private paypaySetupOptions;
    private getEndpoint;
    private invokeMethod;
    createPayment: (payload: any, ...args: [callback?: HttpsClientMessage] | [agreeSimilarTransaction: boolean, callback?: HttpsClientMessage]) => Promise<HttpsClientSuccess | HttpsClientError>;
    qrCodeCreate: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    qrCodeDelete: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getCodePaymentDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getPaymentDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    paymentCancel: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    paymentAuthCapture: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    paymentAuthRevert: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    paymentRefund: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getRefundDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    checkUserWalletBalance: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    authorization: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    authorizationResult: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    accountLinkQRCodeCreate: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    validateJWT: (token: string, clientSecret: string) => string | object;
    paymentPreauthorize: (payload: any, ...args: [callback?: HttpsClientMessage] | [agreeSimilarTransaction: boolean, callback?: HttpsClientMessage]) => Promise<HttpsClientSuccess | HttpsClientError>;
    paymentSubscription: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    createPendingPayment: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getPendingPaymentDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    cancelPendingOrder: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    refundPendingPayment: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getUserAuthorizationStatus: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    unlinkUser: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    cashBack: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getCashBackDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    reverseCashBack: (payload: any, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
    getReverseCashBackDetails: (inputParams: Array<string | number>, callback?: HttpsClientMessage) => Promise<HttpsClientSuccess | HttpsClientError>;
}
export declare let payPayRestSDK: PayPayRestSDK;
export { PayPayRestSDK };
